#!/bin/sh
# -*- scheme -*-
exec guile -l $0 -c "(apply main (cdr (command-line)))" "$@"
!#

;;
;; Sometimes you need to merge a huge list of commits into another
;; branch, and you might not want all of them. "git rebase" already
;; helps with this task but it becomes less convenient when you have
;; lots of commits as you may not remeber all of them and also because
;; it doesn't show you the contents of each commit.
;;
;; git-cherry-base is an interactive script that lets you choose which
;; commits you'd like to merge and even which parts of the commit you
;; want. Given a list of revisions (obtained from "git rev-list") it
;; will show the contents for each commit and will let you choose if you
;; want to merge the commit, skip it or merge only parts of it.
;;
;; git-cherry-base receives a file with a list of revisions in it (one
;; per line). The file can be obviously manually modified before giving
;; it to the script.
;;

(use-modules (system base pmatch)
             (ice-9 rdelim))

(define-syntax-rule (unless condition stmt stmt* ...)
  (if (not condition) (begin stmt stmt* ...)))

(define (yes/no msg proc-yes proc-no)
  (let loop ()
    (display msg)
    (let ((ch (read-char)))
      (read-char) ;; skip carriage return
      (case ch
        ((#\y #\Y) (proc-yes))
        ((#\n #\N) (proc-no))
        (else loop)))))

(define-syntax-rule (system-or-exit* exp ...)
  (let ((status (system* exp ...)))
    (unless (zero? (status:exit-val status))
      (yes/no (simple-format #f "~%Ooops! Something happened, would you like to continue (y/n)? ")
              (lambda () *unspecified*)
              exit))))

(define (git-reset)
  (system-or-exit* "git" "reset"))

(define (git-commit commit)
  (system-or-exit* "git" "commit" "-c" commit))

(define (git-add-patch)
  (system-or-exit* "git" "add" "-p"))

(define (git-add-interactive)
  (system-or-exit* "git" "add" "-i"))

(define (git-cherry-pick commit)
  (system-or-exit* "git" "cherry-pick" commit))

(define (git-cherry-pick-no-commit commit)
  (system-or-exit* "git" "cherry-pick" "-n" commit))

(define (git-cherry-pick-hunks commit)
  (git-cherry-pick-no-commit commit)
  (git-reset)
  (git-add-patch)
  (git-add-interactive)
  (git-commit commit))

(define (git-show commit)
  (system-or-exit* "git" "show" commit))

(define (git-log-name-only commit)
  (system-or-exit* "git" "log" "--name-only" (simple-format #f "~a^..~a" commit commit)))

(define (git-cherry-base commit)
  (let loop ()
    (simple-format #t "~%~a~%~%" (make-string 70 #\=))
    (git-log-name-only commit)
    (simple-format #t "~%[c]herry-pick, cherry-pick [h]unks, [v]iew, [s]kip? ")
    (let ((ch (read-char)))
      (read-char) ;; skip carriage return
      (unless (char=? ch #\s)
        (case ch
          ((#\c) (git-cherry-pick commit))
          ((#\h) (git-cherry-pick-hunks commit))
          ((#\v) (begin
                   (git-show commit)
                   (git-cherry-base commit)))
          (else (git-cherry-base commit)))))))

(define (cherry-base port)
  (let loop ((commit (read-line port)))
    (unless (eof-object? commit)
      (git-cherry-base commit)
      (loop (read-line port)))))

(define (main . args)
  (pmatch args
    ((,file-name)
     (call-with-input-file file-name cherry-base))
    (else
     (format (current-error-port) "Usage: git-cherry-base <rev-file>~%"))))
